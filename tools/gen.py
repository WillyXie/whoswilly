#!python3

import argparse
import os
import re

"""
Argument parsing
"""
def parse_arg():
  parser = argparse.ArgumentParser()
  parser.add_argument('-p', '--path', type=str, required=True,
                      help='path to src directory')
  args = parser.parse_args()

  return args

"""
Parse source files
"""
def get_dictNote(pathSrc):
  # Get source notes
  dictFile = []
  #root = os.path.dirname(os.path.realpath(__file__))
  if (not os.path.exists(pathSrc)):
    print(f"Cannot read path '{pathSrc}' successfully!!")
    exit()
  absPathSrc = os.path.abspath(os.path.realpath(pathSrc))
  dirs = os.listdir(absPathSrc)
  for dir in dirs:
    for file in os.listdir(f"{absPathSrc}/{dir}"):
      dictFile.append({"category":dir, "title":file[:-5],
                       "path":f"{absPathSrc}/{dir}/{file}"})
  print("File list:")
  for file in dictFile:
    print(file)

  # Get note content from file
  dictNote = []
  pattern_header = re.compile(r"<h[1-3].*id=\"(.*)\".*>(.*)</h[1-3]>")
  for file in dictFile:
    print(f"Parsing content from: {file["path"]}")
    chapters = []
    with open(file["path"], "r") as f:
      content = f.readlines()
      for line in content:
        # Match header element
        match = pattern_header.match(line)
        if match:
          chapters.append((match.group(1), match.group(2)))
      dictNote.append({"category":file["category"], "title":file["title"],
                       "chapters":chapters, "content":content})

  return dictNote

"""
Generate note pages
"""
genNotation = f"""
<!--
This file is automatically generated by gen.py tool.
Please do not modify this file directly.
-->
"""
def gen_note(dictNote):
  for note in dictNote:
    with open(f"notes/{note["title"]}.html", "w") as f:
      f.write(f"{genNotation}\n")
      f.write("<!doctype html>\n")
      f.write("<html lang=\"en-US\">\n")
      f.write("\t<head>\n")
      f.write("\t\t<meta charset=\"utf-8\" />\n")
      f.write("\t\t<meta name=\"viewport\" content=\"width=device-width\" />\n")
      f.write(f"\t\t<title>{note["title"]}</title>\n")
      f.write("\t\t<link href=\"style/style.css\", rel=\"stylesheet\"</link>\n")
      f.write("\t</head>\n\n")
      f.write("\t<body>\n")
      f.write("\t\t<div class=\"borderBox\" id=\"divRoot\">\n")
      f.write("\t\t\t<div class=\"borderBox\" id=\"divTop\">\n")
      f.write("\t\t\t\t<a href=\"bookshelf.html\">Willy's Bookshelf</a></li>\n")
      f.write("\t\t\t</div> <!-- divTop -->\n")
      # Page with links
      f.write("\t\t\t<div class=\"borderBox\" id=\"divLeft\">\n")
      # Chapter link
      for chapter in note["chapters"]:
        f.write(f"\t\t\t\t\t<a href=\"#{chapter[0]}\">{chapter[1]}</a></br>\n")
      f.write("\t\t\t</div> <!-- divLeft -->\n")
      f.write("\t\t\t<div class=\"borderBox\" id=\"divMain\">\n")
      # Page without links

      for line in note["content"]:
        f.write(f"\t\t\t\t{line}")

      f.write("\t\t\t</div> <!-- divMain -->\n")
      f.write("\t\t</div><!-- divRoot -->\n")
      f.write("\t</body>\n")
      f.write("</html>\n")

  # Generate bookshelf page
  curCategory = None
  with open(f"notes/bookshelf.html", "w") as f:
    f.write(f"{genNotation}\n")
    f.write("<!doctype html>\n")
    f.write("<html lang=\"en-US\">\n")
    f.write("\t<head>\n")
    f.write("\t\t<meta charset=\"utf-8\" />\n")
    f.write("\t\t<meta name=\"viewport\" content=\"width=device-width\" />\n")
    f.write(f"\t\t<title>Willy's Bookshelf</title>\n")
    f.write("\t\t<link href=\"style/style.css\", rel=\"stylesheet\"</link>\n")
    f.write("\t</head>\n\n")
    f.write("\t<body>\n")
    f.write("\t\t<div class=\"borderBox\" id=\"divRoot\">\n")
    f.write("\t\t\t<div class=\"borderBox\" id=\"divTop\">\n")
    f.write("\t\t\t\t<h3>Welcome to my little corner for knowledge notes!!</h3>\n")
    f.write("\t\t\t</div> <!-- divTop -->\n")
    f.write("\t\t\t<div class=\"borderBox\" id=\"divLeft\">\n")

    for note in dictNote:
      if (not curCategory) or (curCategory!=note["category"]):
        curCategory = note["category"]
        f.write(f"\t\t\t\t<h3>{curCategory}</h3>\n")
      f.write(f"\t\t\t\t<a href=\"{note["title"]}.html\">{note["title"]}</a></br>\n")

    f.write("\t\t\t</div> <!-- divLeft -->\n")
    f.write("\t\t</div><!-- divRoot -->\n")
    f.write("\t</body>\n")
    f.write("</html>\n")

  return 0

"""
Main function
"""
def main():
  args = parse_arg()
  dictNote = get_dictNote(args.path)
  gen_note(dictNote)

  return 0

"""
Execution entry point
"""
if __name__ == "__main__":
  main()
